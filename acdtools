#!/bin/bash

# ACDTools

# Logging function
function ACDToolsLog {
    echo -n "[$(date "+%Y-%m-%d %H:%M:%S")]"

    case "${1}" in
        info)
            echo -en " [\033[0;36mINFO \033[0m] "
            ;;
        error)
            echo -en " [\033[0;31mERROR\033[0m] "
            ;;
        warning)
            echo -en " [\033[0;33mWARN \033[0m] "
            ;;
    esac

    # Strip out double spaces caused by indentation
    LOGLINE=$(echo ${2} | sed 's/  */ /g')
    echo ${LOGLINE}
}


# Set directory of current script
# http://stackoverflow.com/a/246128/811814
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SCRIPTPATH="${DIR}/$(basename ${0})"


# Determine configuration file path and load it

# If -c is set, then set that value as ${OPTARG}
while getopts ":c:" opt; do
    case $opt in
        c)
            ACDToolsLog info "User defined configuration file at ${OPTARG}"
            CONFOPT=${OPTARG}
            ;;
    esac
done

if [ ${CONFOPT} ] && [ -f ${CONFOPT} ]; then
    # Ensure user defined configuration exists
    CONFIGPATH=${CONFOPT}
elif [ -f ${PWD}/vars ]; then
    # Check if configuration exists in PWD
    CONFIGPATH=${PWD}/vars
elif [ -f ${DIR}/vars ]; then
    # Check if configuration exists in the script directory
    CONFIGPATH=${DIR}/vars
fi

# If no valid configuation path, kill the script.
if [ ! ${CONFIGPATH} ]; then
    ACDToolsLog error 'No valid configuration can be found. \
        Use -c to define a configuration.'
    exit 1
else
    ACDToolsLog info "Using configuration at ${CONFIGPATH}"
    source ${CONFIGPATH}
fi

# Default mode is Amazon
if [ -z "${MODE}" ]; then
    MODE='amazon'
fi

# TODO: Config validity


# Functions

# Unmount a mountpoint. Will not unmount if not already mounted.
# TODO: fusermount does not exist on OS X, make compatible.
function ACDToolsUnmount {
    # Check if ${1} is a mountpoint (remove trailing slash)
    ISMOUNTPOINT=`mount | grep ${1%/} | wc -l`
    if [ ${ISMOUNTPOINT} -eq "0" ]; then
        ACDToolsLog warning "Can not unmount ${1} - it is not mounted"
    else
        ACDToolsLog info "Unmounting ${1}"
        fusermount -u ${1}
    fi
}

# Function to unmount all mountpoints associated with ACDTools
function ACDToolsUnmountAll {
    ACDToolsLog info "Unmounting all ACDTools mountpoints"
    ACDToolsUnmount ${DATADIR}
    touch ${DIR}/unmount.acd
    ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/
    sleep 6
    rm -f ${DIR}/unmount.acd
    ACDToolsUnmount ${MOUNTBASE}/acd-decrypted/
    ACDToolsUnmount ${MOUNTBASE}/local-encrypted/
}

# Function to sync node cache
function ACDToolsSyncNodes {
    if [ "${MODE}" == "gdrive" ]; then
        ACDToolsLog info "Google Drive does not maintain a node cache database"
    else
        if [ -f ~/.cache/acd_cli/nodes.db ]; then
            ACDToolsUnsetSyncDate
        elif [ "$1" != "full" ]; then
            ACDToolsLog info "Nodes DB does not exist, we must force sync"
            ACDToolsSyncNodes "full"
        fi

        ACDToolsLog info "Syncing acdcli node cache database"

        if [ "$1" == "full" ]; then
            ACDToolsLog info "Full acdcli node cache sync in progress, \
                this may take a very long time and has multiple stages"
            ${ACDCLI} sync -f | while read line; do ACDToolsLog info "${line}"; done
            ACDToolsUnsetSyncDate
            ${ACDCLI} psync / | while read line; do ACDToolsLog info "${line}"; done
            ACDToolsUnsetSyncDate
            ${ACDCLI} psync -r ${ACDSUBDIR} | while read line; do ACDToolsLog info "${line}"; done
        else
            ${ACDCLI} sync | while read line; do ACDToolsLog info "${line}"; done
        fi
    fi
}

function ACDToolsSyncLocalNodes {
    if [ "${MODE}" == "gdrive" ]; then
        ACDToolsLog info "Google Drive does not maintain a node cache database"
    else
        # Produce upload list to sync
        LOCALLIST=$(find ${MOUNTBASE}/local-encrypted/ | tail -n +2)
        IFS=$'\n'

        ACDToolsLog info "Syncing nodes from Amazon Drive which match the 
            filename of local files. This may take some time."

        for file in ${LOCALLIST}; do
            NODEPATH="${ACDSUBDIR}/${file#${MOUNTBASE}/local-encrypted/}"
            # Forward to /dev/null to avoid spam
            ${ACDCLI} psync ${NODEPATH} > /dev/null
        done
    fi
}

function ACDToolsUnsetSyncDate {
    ACDToolsLog info "Unsetting the last sync date so we don't need to sleep"
    sqlite3 ~/.cache/acd_cli/nodes.db \
        "INSERT OR REPLACE INTO metadata VALUES ('last_sync', 0)" 2>/dev/null
}

# Function to mount everything for ACDTools
function ACDToolsMount {
    # Create mountpoint directories
    mkdir -p ${MOUNTBASE}/acd-encrypted/ \
        ${MOUNTBASE}/acd-decrypted/ \
        ${MOUNTBASE}/local-decrypted/ \
        ${MOUNTBASE}/local-encrypted/ \
        ${DATADIR} 2>/dev/null

    if [ "${MODE}" == 'amazon' ]; then
        # Ensure the ACD Subdir exists
        ${ACDCLI} mkdir -p ${ACDSUBDIR} 2> /dev/null
    elif [ "${MODE}" == 'gdrive' ]; then
        MOUNTPREFIX="/${ACDSUBDIR}"
    fi

    ACDToolsLog info "Mounting cloud storage Drive"
    screen -dm -S acdtools-mount ${SCRIPTPATH} acdmount

    ACDToolsLog info "Mounting local encrypted filesystem"
    encfs --extpass="echo ${ENCFSPASS}" --reverse \
        ${MOUNTBASE}/local-decrypted/ ${MOUNTBASE}/local-encrypted/

    ACDToolsLog info "Mounting cloud decrypted filesystem"
    encfs --extpass="echo ${ENCFSPASS}" \
        ${MOUNTBASE}/acd-encrypted/${MOUNTPREFIX} ${MOUNTBASE}/acd-decrypted/

    ACDToolsLog info "Mounting UnionFS"
    unionfs-fuse -o cow,allow_other \
        ${MOUNTBASE}/local-decrypted=RW:${MOUNTBASE}/acd-decrypted=RO \
        ${DATADIR}
}

# Function to print usage of ACDTools
function ACDToolsUsage {
    echo $"Usage: $0 {mount|unmount|upload|sync|syncdeletes|acdmount}"
}

# Reflect unionfs deleted file objects on Amazon Drive
function ACDToolsSyncDeletes {
    ACDMOUNT="${MOUNTBASE}/acd-encrypted/"
    SEARCHDIR="${MOUNTBASE}/local-decrypted/.unionfs-fuse/"

    if [ -d "$SEARCHDIR" ]; then
       MATCHED=$(find ${SEARCHDIR} -type f -name '*_HIDDEN~')
    else
        # There's no need to proceed with this function
        ACDToolsLog info "No .unionfs-fuse/ directory found, nothing to delete"
        return
    fi

    # Set the for delimiter
    IFS=$'\n'

    # For every file listed by the find command
    for file in ${MATCHED}; do

        # Trim off the full path and hidden flag to get the real file path
        FILENAME=$(echo ${file} | grep -oP "^${SEARCHDIR}\K.*")
        FILENAME=${FILENAME%_HIDDEN~}

        ENCNAME=$(encfsctl encode --extpass="echo ${ENCFSPASS}" \
            ${ACDMOUNT} "${FILENAME}")

            if [ "${#ENCNAME}" -gt "0" ]; then
            if [ "${MODE}" == "gdrive" ]; then
                ACDEXIST=$(${RCLONE} ls --max-depth=1 \
                    ${RCLONEREMOTE}:${ACDSUBDIR}/${ENCNAME} > /dev/null 2>&1; \
                    echo $?)
            else
                ACDEXIST=$(${ACDCLI} ls ${ACDSUBDIR}/${ENCNAME} > /dev/null 2>&1; \
                    echo $?)
            fi
            
            if [ "${ACDEXIST}" -eq "0" ]; then
                # File does exist, delete it from Amazon Drive
                ACDToolsLog info "${file#$SEARCHDIR} exists on cloud drive - \
                    deleting"
                    
                if [ "${MODE}" == "gdrive" ]; then
                    DELCMD=$(${RCLONE} delete \
                        ${RCLONEREMOTE}:"${ACDSUBDIR}/${ENCNAME}")
                else
                    DELCMD=$(${ACDCLI} rm "${ACDSUBDIR}/${ENCNAME}")
                fi

                until ${DELCMD}
                do
                    # Failed delete - sleep and retry
                    ACDToolsLog error "Delete failed, trying again in 30
                        seconds"
                    sleep 30
                done

                ACDToolsLog info "${FILENAME} deleted from cloud drive"
            else
                ACDToolsLog info "${file#$SEARCHDIR} is not on cloud drive"
            fi

            # Remove the UnionFS hidden object
            rm -rf "${file}"
        else
            ACDToolsLog error "Empty name returned from encfsctl - skipping."
            FAILEDSYNCDELETES=1
        fi

    done

    # Sync Amazon Drive changes
    ACDToolsSyncNodes

    # Delete the searchdir so that it is not uploaded as an empty directories
    # There's still a chance this can happen with the fix for #27
    if [ -z "${FAILEDSYNCDELETES}" ]; then
        rm -rf "${SEARCHDIR}"
    else
        ACDToolsLog warn "Not clearing .unionfs directory as there were \
            failures."
    fi
}

# Upload local data to Amazon Drive
function ACDToolsUpload {
    # Exit if already being executed
    RUNNINGPID=`cat ${DIR}/upload.pid 2>/dev/null`
    if [ -e /proc/${RUNNINGPID} ] && [ ! -z ${RUNNINGPID} ]; then
        ACDToolsLog error "Upload script already running"
        exit 1
    else
        echo $$ > ${DIR}/upload.pid
    fi

    # Sync Deletes
    ACDToolsSyncDeletes

    # Logic for force syncing on repeated failure
    ULATTEMPTS=0

    # Determine the .unionfs-fuse directory name as to not upload it
    EXCLUDENAME=$(encfsctl encode --extpass="echo ${ENCFSPASS}" \
        ${MOUNTBASE}/acd-encrypted .unionfs-fuse)
    if [ "${#EXCLUDENAME}" -gt "0" ]; then
        ACDToolsLog info "Will not upload ${EXCLUDENAME} directory \
            (.unionfs-fuse)"
        if [ "${MODE}" == "gdrive" ]; then
            ACDEXCLUDE=" --exclude /${EXCLUDENAME}/* "
            ULCMD=$(${RCLONE} -v copy ${ACDEXCLUDE} \
                ${MOUNTBASE}/local-encrypted/ \
                ${RCLONEREMOTE}:${ACDSUBDIR})
        else
            ACDEXCLUDE=" -xp ${MOUNTBASE}/local-encrypted/${EXCLUDENAME} "
            ULCMD=$(${ACDCLI} upload -o ${ACDEXCLUDE} \
                ${MOUNTBASE}/local-encrypted/* \
                ${ACDSUBDIR})
        fi
    fi

    # Upload to Cloud Drive
    # Redirect error to `/dev/null` so as not to pollute the output with an
    # `Input/output error`.
    if [ "$(ls -A ${MOUNTBASE}/local-encrypted/* 2> /dev/null)" ] ; then
        until ${ULCMD}
        do
            ULATTEMPTS=$((ULATTEMPTS+1))
            ACDToolsLog error "Some uploads failed - uploading again after a
                sync (attempt ${ULATTEMPTS})"

            if [ "${ULATTEMPTS}" -ge 5 ]; then
                ACDToolsLog error "Upload failed 5 times - giving up"
                exit 1
            else
                ACDToolsSyncNodes
                ACDToolsSyncLocalNodes
            fi
            sleep 60
        done
    else
        ACDToolsLog info "${MOUNTBASE}/local-encrypted/* is empty - nothing to 
            upload"
    fi

    ACDToolsLog info "Upload Complete - Syncing changes"
    ACDToolsSyncNodes
    ACDToolsSyncLocalNodes

    # Delete local files older than ${LOCALDAYS}
    ACDToolsLocalCleanup

    # Cleanup pidfile
    rm -rf ${DIR}/upload.pid
}

# Delete local data older than ${LOCALDAYS}
function ACDToolsLocalCleanup {
    ACDToolsLog info "Deleting local files older than ${LOCALDAYS} days"

    find ${MOUNTBASE}/local-decrypted/ -type f \
        -ctime +${LOCALDAYS} -exec rm -rf {} \;
}

# Foreground acdcli mount which will keep remounting until unmount file exists
function ACDToolsACDCLIMount {
    while [ ! -f ${DIR}/unmount.acd ]
    do
        ACDToolsLog info "Running cloud storage mount in the foreground"
        ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/

        if [ "${MODE}" == 'amazon' ]; then
            ${ACDCLI} -d mount -fg \
                --modules="subdir,subdir=${ACDSUBDIR}" \
                ${MOUNTBASE}/acd-encrypted/
        elif [ "${MODE}" == 'gdrive' ]; then
            mkdir -p ${MOUNTBASE}/chunks
            ${PLEXDRIVE} -o allow_other,read_only -v 2 \
                -t ${MOUNTBASE}/chunks \
                --clear-chunk-max-size=32G ${MOUNTBASE}/acd-encrypted/
        fi

        ACDToolsLog info "Cloud storage mount exited - checking if to remount in
            a couple of seconds"
        sleep 2
    done

    ACDToolsLog info "The acdcli mount exited cleanly"
    rm -f ${DIR}/unmount.acd
}

# Check for dependencies
function ACDToolsDependencyCheck {
    if [ "${MODE}" == "gdrive" ]; then
        # rclone
        TEST=`which ${RCLONE} > /dev/null 2>&1; echo $?`
        if [ "${TEST}" -ne "0" ]; then
            FAILURE="${FAILURE} rclone"
        fi

        # plexdrive
        TEST=`which ${PLEXDRIVE} > /dev/null 2>&1; echo $?`
        if [ "${TEST}" -ne "0" ]; then
            FAILURE="${FAILURE} plexdrive"
        fi
    else
        # acd_cli
        TEST=`which ${ACDCLI} > /dev/null 2>&1; echo $?`
        if [ "${TEST}" -ne "0" ]; then
            FAILURE=" acd_cli"
        fi

        # sqlite3
        TEST=`which sqlite3 > /dev/null 2>&1; echo $?`
        if [ "${TEST}" -ne "0" ]; then
            FAILURE="${FAILURE} sqlite3"
        fi
    fi

    # unionfs
    TEST=`which unionfs-fuse > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} unionfs-fuse"
    fi

    # encfs
    TEST=`which encfs > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} encfs"
    fi

    # screen
    TEST=`which screen > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} screen"
    fi

    if [ ! -z "${FAILURE}" ]; then
        ACDToolsLog error "ACDTools is missing the following \
            dependencies:${FAILURE}"
        exit 1
    fi
}


# Ensure dependencies exist before proceeding
ACDToolsDependencyCheck

# Determine what the user wants to do
ACTION=${*: -1:1} # TODO: This takes the last arg, doubt it is reliable.

case "${ACTION}" in
    mount)
        ACDToolsUnmountAll
        ACDToolsSyncNodes
        ACDToolsMount
        ;;
    unmount)
        ACDToolsUnmountAll
        ;;
    upload)
        ACDToolsUpload
        ;;
    sync)
        ACDToolsSyncNodes
        # TODO: Work out how to pass a full option to this
        ;;
    syncdeletes)
        ACDToolsSyncDeletes
        ;;
    usage)
        ACDToolsUsage
        ;;
    acdmount)
        ACDToolsACDCLIMount
        ;;
    *)
        ACDToolsLog error "Unknown command: ${ACTION}"
        ACDToolsUsage
        exit 1
esac
