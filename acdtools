#!/bin/bash

# ACDTools

# Logging function
function ACDToolsLog {
    echo -n "[$(date "+%Y-%m-%d %H:%M:%S")]"

    case "${1}" in
        info)
            echo -en " [\033[0;36mINFO \033[0m] "
            ;;
        error)
            echo -en " [\033[0;31mERROR\033[0m] "
            ;;
        warning)
            echo -en " [\033[0;33mWARN \033[0m] "
            ;;
    esac

    echo ${2}
}


# Set directory of current script
# http://stackoverflow.com/a/246128/811814
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SCRIPTPATH="${DIR}/$(basename ${0})"


# Determine configuration file path and load it

# If -c is set, then set that value as ${OPTARG}
while getopts ":c:" opt; do
    case $opt in
        c)
            ACDToolsLog info "User defined configuration file at ${OPTARG}"
            CONFOPT=${OPTARG}
            ;;
    esac
done

if [ ${CONFOPT} ] && [ -f ${CONFOPT} ]; then
    # Ensure user defined configuration exists
    CONFIGPATH=${CONFOPT}
elif [ -f ${PWD}/vars ]; then
    # Check if configuration exists in PWD
    CONFIGPATH=${PWD}/vars
elif [ -f ${DIR}/vars ]; then
    # Check if configuration exists in the script directory
    CONFIGPATH=${DIR}/vars
fi

# If no valid configuation path, kill the script.
if [ ! ${CONFIGPATH} ]; then
    ACDToolsLog error 'No valid configuration can be found. \
        Use -c to define a configuration.'
    exit 1
else
    ACDToolsLog info "Using configuration at ${CONFIGPATH}"
    source ${CONFIGPATH}
fi

# TODO: Config validity


# Functions

# Unmount a mountpoint. Will not unmount if not already mounted.
# TODO: fusermount does not exist on OS X, make compatible.
function ACDToolsUnmount {
    # Check if ${1} is a mountpoint (remove trailing slash)
    ISMOUNTPOINT=`mount | grep ${1%/} | wc -l`
    if [ ${ISMOUNTPOINT} -eq "0" ]; then
        ACDToolsLog warning "Can not unmount ${1} - it is not mounted"
    else
        ACDToolsLog info "Unmounting ${1}"
        fusermount -u ${1}
    fi
}

# Function to unmount all mountpoints associated with ACDTools
function ACDToolsUnmountAll {
    ACDToolsLog info "Unmounting all ACDTools mountpoints"
    ACDToolsUnmount ${DATADIR}
    ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/
    ACDToolsUnmount ${MOUNTBASE}/acd-decrypted/
    ACDToolsUnmount ${MOUNTBASE}/local-encrypted/
}

# Function to sync node cache 
function ACDToolsSyncNodes {
    ACDToolsLog info "Syncing acdcli node cache database"
    ${ACDCLI} psync / | while read line; do ACDToolsLog info "${line}"; done

    if [ "$1" == "full" ]; then
        ACDToolsLog info "Full acdcli node cache sync in progress, \
            this may take a while"
        ${ACDCLI} sync -f | while read line; do ACDToolsLog info "${line}"; done
        ${ACDCLI} psync / | while read line; do ACDToolsLog info "${line}"; done
    else
        ${ACDCLI} sync | while read line; do ACDToolsLog info "${line}"; done
    fi
}

# Function to mount everything for ACDTools
function ACDToolsMount {
    # Create mountpoint directories
    mkdir -p ${MOUNTBASE}/acd-encrypted/ \
        ${MOUNTBASE}/acd-decrypted/ \
        ${MOUNTBASE}/local-decrypted/ \
        ${MOUNTBASE}/local-encrypted/ \
        ${DATADIR} 2>/dev/null

    # Ensure the ACD Subdir exists
    ${ACDCLI} mkdir -p ${ACDSUBDIR} 2> /dev/null

    # Mount everything
    ACDToolsLog info "Mounting Amazon Drive"
    screen -dm -S acd-mount ${SCRIPTPATH} acdmount

    ACDToolsLog info "Mounting local encrypted filesystem"
    encfs --extpass="echo ${ENCFSPASS}" --reverse \
        ${MOUNTBASE}/local-decrypted/ ${MOUNTBASE}/local-encrypted/

    ACDToolsLog info "Mounting Amazon decrypted filesystem"
    encfs --extpass="echo ${ENCFSPASS}" \
        ${MOUNTBASE}/acd-encrypted/ ${MOUNTBASE}/acd-decrypted/

    ACDToolsLog info "Mounting UnionFS"
    unionfs-fuse -o cow,allow_other \
        ${MOUNTBASE}/local-decrypted=RW:${MOUNTBASE}/acd-decrypted=RO \
        ${DATADIR}
}

# Function to print usage of ACDTools
function ACDToolsUsage {
    echo $"Usage: $0 {mount|unmount|upload|sync|syncdeletes|acdmount}"
}

# Reflect unionfs deleted file objects on Amazon Drive
function ACDToolsSyncDeletes {
    ACDMOUNT="${MOUNTBASE}/acd-encrypted/"
    SEARCHDIR="${MOUNTBASE}/local-decrypted/.unionfs-fuse/"

    if [ -d "$SEARCHDIR" ]; then
       MATCHED=$(find ${SEARCHDIR} -type f -name '*_HIDDEN~')
    else
        # There's no need to proceed with this function
        ACDToolsLog info "No .unionfs-fuse/ directory found, nothing to delete"
        return
    fi

    # Set the for delimiter
    IFS='
    '

    # For every file listed by the find command
    for file in ${MATCHED}; do

        # Trim off the full path and hidden flag to get the real file path
        FILENAME=$(echo ${file} | grep -oP "^${SEARCHDIR}\K.*")
        FILENAME=${FILENAME%_HIDDEN~}

        ENCNAME=$(encfsctl encode --extpass="echo ${ENCFSPASS}" \
            ${ACDMOUNT} "${FILENAME}")

        if [ "${#ENCNAME}" -gt "0" ]; then
            ACDEXIST=$(${ACDCLI} ls ${ACDSUBDIR}/${ENCNAME} > /dev/null 2>&1; \
                echo $?)

            if [ "${ACDEXIST}" -eq "0" ]; then
                # File does exist, delete it from Amazon Drive
                ACDToolsLog info "${file#$SEARCHDIR} exists on Amazon Drive - \
                    deleting"
                until `${ACDCLI} rm "${ACDSUBDIR}/${ENCNAME}"`
                do
                    # Failed delete - sleep and retry
                    ACDToolsLog error "Delete failed, trying again in 30 \
                        seconds"
                    sleep 30
                done

                ACDToolsLog info "${FILENAME} deleted from Amazon Drive"
            else
                ACDToolsLog info "${file#$SEARCHDIR} is not on Amazon Drive"
            fi

            # Remove the UnionFS hidden object
            rm -rf "${file}"
        else
            ACDToolsLog error "Empty name returned from encfsctl - skipping."
            FAILEDSYNCDELETES=1
        fi

    done

    # Sync Amazon Drive changes
    ACDToolsSyncNodes

    # Delete the searchdir so that it is not uploaded as an empty directories
    # There's still a chance this can happen with the fix for #27
    if [ -z "${FAILEDSYNCDELETES}" ]; then
        rm -rf "${SEARCHDIR}"
    else
        ACDToolsLog warn "Not clearing .uninfs directory as there were \
            failures."
    fi
}

# Upload local data to Amazon Drive
function ACDToolsUpload {
    # Exit if already being executed
    RUNNINGPID=`cat ${DIR}/upload.pid 2>/dev/null`
    if [ -e /proc/${RUNNINGPID} ] && [ ! -z ${RUNNINGPID} ]; then
        ACDToolsLog error "Upload script already running"
        exit 1
    else
        echo $$ > ${DIR}/upload.pid
    fi

    # Sync Deletes
    ACDToolsSyncDeletes

    # Logic for force syncing on repeated failure
    ULATTEMPTS=0
    
    # Determine the .unionfs-fuse directory name as to not upload it
    EXCLUDENAME=$(encfsctl encode --extpass="echo ${ENCFSPASS}" \
        ${MOUNTBASE}/acd-encrypted .unionfs-fuse)
    if [ "${#EXCLUDENAME}" -gt "0" ]; then
        ACDToolsLog info "Will not upload ${EXCLUDENAME} directory \
            (.unionfs-fuse)"
        ACDEXCLUDE=" -xp ${MOUNTBASE}/local-encrypted/${EXCLUDENAME} "
    fi

    # Upload to Amazon Drive
	# Redirect error to `/dev/null` so as not to pollute the output with an
	# `Input/output error`.
	if [ "$(ls -A ${MOUNTBASE}/local-encrypted/* 2> /dev/null)" ] ; then
	    until ${ACDCLI} upload -o ${ACDEXCLUDE} ${MOUNTBASE}/local-encrypted/* \
	        ${ACDSUBDIR}
	    do
	        ULATTEMPTS=$((ULATTEMPTS+1))
	        ACDToolsLog error "Some uploads failed - uploading again after a sync \
	            (attempt ${ULATTEMPTS})"

	        if [ "${ULATTEMPTS}" -ge 3 ]; then
	            ACDToolsLog error "Uploads failed 3 (or more) times - Forcing full \
	                sync"
	            ACDToolsSyncNodes full
	        else
	            ACDToolsSyncNodes
	        fi
	        sleep 60
	    done
	else
		ACDToolsLog info "${MOUNTBASE}/local-encrypted/* is empty - nothing to upload"
	fi

    ACDToolsLog info "Upload Complete - Syncing changes"
    ACDToolsSyncNodes

    # Delete local files older than ${LOCALDAYS}
    ACDToolsLocalCleanup

    # Cleanup pidfile
    rm -rf ${DIR}/upload.pid
}

# Delete local data older than ${LOCALDAYS}
function ACDToolsLocalCleanup {
    ACDToolsLog info "Deleting local files older than ${LOCALDAYS} days"

    find ${MOUNTBASE}/local-decrypted/ -type f \
        -mtime +${LOCALDAYS} -exec rm -rf {} \;
}

# Foreground acdcli mount which will catch non-zero exits
function ACDToolsACDCLIMount {
    ACDToolsLog info "Running acd_cli in the foreground"
    ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/

    until ${ACDCLI} -d mount -fg \
        --modules="subdir,subdir=${ACDSUBDIR}" ${MOUNTBASE}/acd-encrypted/
    do
        ACDToolsLog error "The acdcli mount exited with a non-zero exitcode, \
            remounting"
        ACDToolsUnmount ${MOUNTBASE}/acd-encrypted/
        sleep 5
    done

    ACDToolsLog info "The acdcli mount exited with a zero exit code"
}

# Check for dependencies
function ACDToolsDependencyCheck {
    # acd_cli
    TEST=`which ${ACDCLI} > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE=" acd_cli"
    fi

    # unionfs
    TEST=`which unionfs-fuse > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} unionfs-fuse"
    fi

    # encfs
    TEST=`which encfs > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} encfs"
    fi

    # screen
    TEST=`which screen > /dev/null 2>&1; echo $?`
    if [ "${TEST}" -ne "0" ]; then
        FAILURE="${FAILURE} screen"
    fi

    if [ ! -z "${FAILURE}" ]; then
        ACDToolsLog error "ACDTools is missing the following \
            dependencies:${FAILURE}"
        exit 1
    fi
}


# Ensure dependencies exist before proceeding
ACDToolsDependencyCheck

# Determine what the user wants to do
ACTION=${*: -1:1} # TODO: This takes the last arg, doubt it is reliable.

case "${ACTION}" in
    mount)
        ACDToolsUnmountAll
        ACDToolsSyncNodes
        ACDToolsMount
        ;;
    unmount)
        ACDToolsUnmountAll
        ;;
    upload)
        ACDToolsUpload
        ;;
    sync)
        ACDToolsSyncNodes
        # TODO: Work out how to pass a full option to this
        ;;
    syncdeletes)
        ACDToolsSyncDeletes
        ;;
    usage)
        ACDToolsUsage
        ;;
    acdmount)
        ACDToolsACDCLIMount
        ;;
    *)
        ACDToolsLog error "Unknown command: ${ACTION}"
        ACDToolsUsage
        exit 1
esac
